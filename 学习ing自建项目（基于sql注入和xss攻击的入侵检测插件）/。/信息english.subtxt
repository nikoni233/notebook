I am writing an intrusion detection plugin based on XSS attacks and SQL injection. Please provide the corresponding file code according to the directory structure and plugin writing requirements.

Plugin writing requirements: 
The plugin achieves intrusion detection and defends against attacks by reading content from a vector library. The plugin records each log; for normal user input, it outputs a normal log along with the log generation time. For attack input, it outputs the type of attack and the attacker's IP address in that log. 
The reference filename for the plugin is InjectionDetection.js, located in the plugins directory at the root. The SQL injection vector library sqlInjection.json and the XSS injection vector library xssInjection.json are located in the attackVectors directory at the root. The logs generated by the intrusion detection plugin are stored in InjDetLogs.json, located in the logs directory at the root.
1. When the plugin is loaded, it outputs the loading status to the console. 
If the plugin loads successfully, it outputs success messages to the console. 
If the plugin fails to load, it outputs failure messages and error details to the console.
2. Add a temporary blacklist and a permanent blacklist feature (both recorded in files). 
For the temporary blacklist, when an attack behavior is detected, it records the number of times that attack behavior's IP occurs. If it reaches more than 10 attacks within one hour, the IP is added to the temporary blacklist, prohibiting that IP from normal access to the web page, and a prompt with the message "Please contact the administrator" is displayed. The IP added to the temporary blacklist will be banned for 2 hours; during this ban, if the IP accesses the page, a prompt with the message "Please contact the administrator" will be displayed. After 2 hours, the ban on that IP will be lifted. 
For the permanent blacklist feature, users must manually add IPs. IPs added here will be permanently unable to access the web page until manually removed.
3. Add a backend management page for the plugin. (I hope the backend management page part of the plugin is separated into two or more files from the core functionality part of the plugin.) 
3.1. After the plugin loads successfully, output the access URL for the backend management page to the console after the success message. 
3.2. A whitelist feature for accessing the backend page. By default, any IP can access it. After enabling this feature, only specified IPs can manually access the backend interface. 
3.3. Enable and disable the plugin. 
3.4. Display how many attacks have been defended against. 
3.5. View the SQL vector library and XSS vector library, with options to manually add, delete, and modify entries. Support one-click import and export. 
3.6. View, manually add, delete, and modify entries in the temporary and permanent blacklists. 
3.7. View logs. View all logs, with filtering options by date, attack type (XSS attack, SQL attack), or specified IP. 
3.8. Set an alert. When an attack behavior is detected during operation, an alert will pop up in the backend management interface, showing the attack type, attacker's IP, and time of the attack. Clicking this alert will redirect to the corresponding log entry in the log viewing section.

#### Basic Web Environment:
On a web server with XSS attack and SQL injection vulnerabilities, the frontend and backend are separated, with the backend using Node.js.

#### Requirements for File Changes in the Web Basic Environment:
The plugin should be manually installed in the project directory structure without modifying the original files of the web server as much as possible; any changes should be minimal. You can adjust the directory structure as needed. 
For adjustments to server.js, it's best to only add code for including files. Ideally, no modifications should be made to the code in server.js, if that is achievable.

#### Directory Structure of the Basic Web Environment:
MyNewWeb/ │ ├── public/ │ └── index.html # Frontend HTML file (already exists) │ ├── sql/ │ └── users.sql # Database file (already exists) │ ├── package.json # Node.js project description file (already exists) └── server.js # Node.js server main file (already exists)

Project Directory Structure:
MyNewWeb/
│
├── public/
│   └── index.html                    # Frontend HTML file (already exists)
│
├── plugins/
│   └── InjectionDetection.js         # Intrusion detection plugin (plugin, external import)
│
├── attackVectors/
│   ├── sqlInjection.json             # SQL injection vector library (plugin auxiliary file, external import)
│   └── xssInjection.json             # XSS injection vector library (plugin auxiliary file, external import)
│
├── logs/
│   └── InjDetLogs.json               # Logs generated by the plugin (logs generated during plugin runtime)
│
├── blacklists/
│   ├── tempBlacklist.json            # Temporary blacklist file (plugin auxiliary file, external import)
│   └── permBlacklist.json            # Permanent blacklist file (plugin auxiliary file, external import)
│
├── pluginAdmin/                      # Directory for backend management page related files
│   ├── admin.js                      # Core functionality of the backend management page
│   ├── admin.html                    # HTML for the backend management page
│   └── whitelist.json                # Whitelist file
│
├── package.json                      # Node.js project description file (already exists)
├── server.js                         # Node.js server main file (already exists, minimal modifications to mount the plugin)
└── routes/
    └── adminRoutes.js                # Management page route file (plugin auxiliary file, external import)
Information: 
(Already exists) indicates the original files of the web server, which should not be modified as much as possible. If changes are necessary, make them minimal. 
(Plugin, external import) refers to the intrusion detection plugin we are writing. 
(Plugin auxiliary file, external import) refers to the files related to plugin operation, which are also pre-written for import into the project. 
(Logs generated during plugin runtime) refers to the log file that is automatically generated when the plugin runs to record logs.





用英文检索，用中文回答。
 When responding to my questions below, you should prioritize English searches in your knowledge base/internet and use Simplified Chinese for your replies. 
