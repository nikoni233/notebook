已知，环境是在一个web服务器（有xss攻击和sql注入的漏洞）中。
我在编写一个基于xss攻击和sql注入的入侵检测插件，其中的后台管理页面部分。对于插件的核心功能文件我已经编写的差不多了，你可以查看下面的插件代码。请根据我所给出的插件代码和目录结构以及我的编写要求，给出相应的文件代码。（如果需求必要，你可以适当的更改目录结构）

#### 编写要求：
后台管理页面的访问入口是/admin123。其中`admin.html`是该页面的显示界面，`admin.css`是简单的css样式（先不编写），`admin.js`是处理该页面交互功能的文件，`whitelist.json`是该页面调用的配置文件，白名单文件。`config.json`是该页面调用的配置文件。`adminRoutes.js`是该页面的路由文件。
该页面显示格式如下：
左边一个目录栏包含，首页，攻击向量库，黑名单规则，日志，设置。点击目录栏中的选项，调转到对应页面。（这里你可以只用admin.html实现，你也可以用多个html共同实现）。
首页界面，显示文字“统计防御次数”，显示共防御的次数。从日志中获取，计算sql攻击次数+xss攻击次数显示出来。
攻击向量库界面，显示文字“攻击向量库界面”，以表格形式显示内容，有筛选查看功能。显示的表格的表头有，攻击类型，显示内容，操作。筛选查看可以通过“攻击类型”中选择“sql注入向量库”或“xss注入向量库”。“操作”中有一个按钮，功能是点击按钮就在界面上弹出一个提示窗，上面写着该条信息的“显示内容”。
黑名单规则界面，显示文字“黑名单规则”，以表格形式显示内容，有筛选查看功能。显示的表格的表头有，封禁类型，封禁ip，封禁时间，解封时间，操作。筛选查看可以通过“封禁类型”中选择“永久黑名单”或“临时黑名单”。“操作”中有一个按钮，功能是点击按钮就在界面上弹出一个提示窗，上面写着该条信息的“封禁ip”。又因为永久黑名单文件`permBlacklist.json`中只存储了ip，所以对于永久黑名单的“封禁时间”和“解封时间”显示永久文字。
日志界面，显示文字“日志”，以表格形式显示内容，有筛选查看功能。显示的表格的表头有，时间，类型，访问ip，提交内容，操作。筛选查看可以通过“类型”中选择“正常”或“sql注入”或“xss注入”，可以通过“访问ip”中输入ip来查看。“操作”中有一个按钮，功能是点击按钮就在界面上弹出一个提示窗，上面写着该条信息的“访问ip”。
设置界面，显示文字“设置”。界面上显示文字“是否开启白名单访问功能”，在文字的后面有一个按钮，功能是决定是否开始白名单访问后台管理页面，默认是关闭。该设置界面于配置文件`config.json`和`whitelist.json`相关联。

对于路由文件`adminRoutes.js`，是专门针对该后台管理界面的路由文件。请把访问入口/admin123以变量的形式写在路由文件里。


#### 项目目录结构：
MyNewWeb/
│
├── public/
│   └── index.html                    # 前端 HTML 文件（环境文件，已存在）
│
├── plugins/
│   └── InjectionDetection.js         # 入侵检测插件（插件，核心功能文件，外部导入）
│
├── attackVectors/
│   ├── sqlInjection.json             # SQL注入向量库（插件附属文件，向量库文件，外部导入）
│   └── xssInjection.json             # XSS注入向量库（插件附属文件，向量库文件，外部导入）
│
├── logs/
│   └── InjDetLogs.json               # 插件生成的日志文件（插件运行时产生的日志）
│
├── blacklists/
│   ├── tempBlacklist.json            # 临时黑名单文件（插件附属文件，黑名单文件，外部导入）
│   └── permBlacklist.json            # 永久黑名单文件（插件附属文件，黑名单文件，外部导入）
│
├── pluginAdmin/                      # 插件后台管理页面相关文件目录（插件附属文件，后台文件，外部导入）
│   ├── admin.html                    # 后台管理页面的HTML（插件附属文件，后台文件，外部导入）
│   ├── admin.css                     # 后台管理页面的css样式（插件附属文件，后台文件，外部导入）
│   ├── admin.js                      # 后台管理页面的核心功能（插件附属文件，后台文件，外部导入）
│   ├── whitelist.json                # 白名单文件（插件附属文件，后台文件，外部导入）
│   └── config.json                   # 后台管理页面的配置文件（插件附属文件，后台文件，外部导入）
│
├── routes/
│   └── adminRoutes.js                # 针对后台管理页面的路由文件（插件附属文件，路由文件，外部导入）
│
├── package.json                      # Node.js 项目描述文件（环境文件，已存在）
└── server.js                         # Node.js 服务器主文件（环境文件，已存在）
信息：
（环境文件，已存在）是web服务器原文件，尽可能的不改动。如果需要改动按最小改动。
（插件，核心功能文件，外部导入）入侵检测插件的核心文件，基本上已编写完毕。
（插件附属文件，向量库文件，外部导入）这个是插件运行时调用的向量库文件，提前编写好通过外部导入的。
（插件附属文件，黑名单文件，外部导入）这个是插件运行时调用的黑名单文件，默认为空，根据实际运行情况来改变其中的内容。
（插件附属文件，后台文件，外部导入）这个是插件运行时调用的后台文件，插件的后台管理页面，提前编写好通过外部导入的。
（插件附属文件，路由文件，外部导入）这个是插件运行时调用的路由文件，专门针对后台管理页面的路由文件。
（插件运行时产生的日志）这个是插件运行的时候，自动生成的日志文件。记录日志。

#### 已在server.js中引用插件，其中的引用代码如下：
// 引入入侵检测插件
const detectInjection = require('./plugins/InjectionDetection');
app.use(detectInjection);

#### 插件InjectionDetection.js目前编写的情况，代码如下：
const fs = require('fs');
const path = require('path');
// 配置默认封禁时长（以秒为单位）和最大攻击次数
const DEFAULT_BAN_DURATION_SECONDS = 2 * 60 * 20; // 2小时封禁（以秒为单位）
const MAX_ATTACK_COUNT = 10; // 默认最大攻击次数
// 永久黑名单默认内容
const defaultPermBlacklist = [
    "192.168.255.10",
    "203.0.113.5"
];
// 读取向量库
const sqlInjectionPatterns = JSON.parse(fs.readFileSync(path.join(__dirname, '../attackVectors/sqlInjection.json')));
const xssInjectionPatterns = JSON.parse(fs.readFileSync(path.join(__dirname, '../attackVectors/xssInjection.json')));
// 创建日志文件夹
function ensureLogDirectoryExists(logDir) {
    if (!fs.existsSync(logDir)) {
        fs.mkdirSync(logDir, { recursive: true });
    }
}
// 初始化文件
function initializeFile(filePath, initialContent) {
    if (!fs.existsSync(filePath)) {
        fs.writeFileSync(filePath, JSON.stringify(initialContent, null, 2));
    } else {
        const fileContent = fs.readFileSync(filePath, 'utf-8');
        if (fileContent.trim() === '') {
            fs.writeFileSync(filePath, JSON.stringify(initialContent, null, 2));
        }
    }
}
// 初始化永久黑名单
function initializePermBlacklist() {
    const permBlacklistPath = path.join(__dirname, '../blacklists/permBlacklist.json');
    initializeFile(permBlacklistPath, defaultPermBlacklist);
}
// 读取黑名单
function loadBlacklist(type) {
    const blacklistPath = path.join(__dirname, `../blacklists/${type}Blacklist.json`);
    initializeFile(blacklistPath, []); // 初始化为空数组
    return JSON.parse(fs.readFileSync(blacklistPath));
}
// 保存黑名单
function saveBlacklist(type, blacklist) {
    const blacklistPath = path.join(__dirname, `../blacklists/${type}Blacklist.json`);
    fs.writeFileSync(blacklistPath, JSON.stringify(blacklist, null, 2));
}
// 检查IP是否在黑名单中并返回封禁类型及时间
function checkBlacklist(ip) {
    const permBlacklist = loadBlacklist('perm');
    const tempBlacklist = loadBlacklist('temp');
    const currentTime = Date.now();

    // 检查永久黑名单
    if (permBlacklist.includes(ip)) {
        return { isBlacklisted: true, type: 'perm' };
    }

    // 检查临时黑名单
    const tempEntry = tempBlacklist.find(entry => entry.ip === ip);
    if (tempEntry) {
        const banDurationMillis = tempEntry.banDuration * 1000; // 封禁时长（毫秒）
        const banEndTime = new Date(tempEntry.bannedAt).getTime() + banDurationMillis;
        if (currentTime < banEndTime) { // 封禁时间未过
            const remainingTime = Math.ceil((banEndTime - currentTime) / 1000); // 剩余时间（秒）
            return { isBlacklisted: true, type: 'temp', remainingTime: remainingTime };
        } else {
            // 封禁时间已过，解除封禁
            const updatedTempBlacklist = tempBlacklist.filter(entry => entry.ip !== ip);
            saveBlacklist('temp', updatedTempBlacklist);
        }
    }
    return { isBlacklisted: false };
}
// 记录攻击行为的IP次数，并在必要时加入临时黑名单
function recordAttackAttempt(ip) {
    const logDir = path.join(__dirname, '../logs');
    const attackCountPath = path.join(logDir, 'attackCount.json');
    initializeFile(attackCountPath, {});

    const attackCounts = JSON.parse(fs.readFileSync(attackCountPath));
    const currentTime = Date.now();

    if (!attackCounts[ip]) {
        attackCounts[ip] = { count: 1, firstAttempt: currentTime };
    } else {
        const firstAttemptTime = attackCounts[ip].firstAttempt;
        if (currentTime - firstAttemptTime < 60 * 60 * 1000) { // 在一小时内
            attackCounts[ip].count++;
        } else {
            attackCounts[ip] = { count: 1, firstAttempt: currentTime };
        }
    }

    // 如果攻击次数超过MAX_ATTACK_COUNT次，将其加入临时黑名单
    if (attackCounts[ip].count >= MAX_ATTACK_COUNT) {
        const banDuration = DEFAULT_BAN_DURATION_SECONDS * 1000; // 封禁时长（毫秒）
        const unbanAt = new Date(currentTime + banDuration).toISOString(); // 计算解封时间

        const tempBlacklist = loadBlacklist('temp');
        tempBlacklist.push({
            ip: ip,
            bannedAt: new Date().toISOString(),
            banDuration: DEFAULT_BAN_DURATION_SECONDS, // 封禁时长（秒）
            unbanAt: unbanAt // 解封时间
        });
        saveBlacklist('temp', tempBlacklist);
        delete attackCounts[ip]; // 重置攻击次数
    }

    fs.writeFileSync(attackCountPath, JSON.stringify(attackCounts, null, 2));
}
// 日志记录函数
function logAttack(type, ip, input) {
    const logDir = path.join(__dirname, '../logs');
    const logPath = path.join(logDir, 'InjDetLogs.json');
    
    ensureLogDirectoryExists(logDir);
    initializeFile(logPath, []);

    let currentLogs = [];
    try {
        currentLogs = JSON.parse(fs.readFileSync(logPath));
    } catch (err) {
        console.error('日志文件解析出错:', err);
        currentLogs = [];
    }

    const logEntry = {
        time: new Date().toISOString(),
        type: type,
        ip: ip,
        input: input
    };

    currentLogs.push(logEntry);
    fs.writeFileSync(logPath, JSON.stringify(currentLogs, null, 2));
}
// 检测函数
function detectInjection(req, res, next) {
    const userInput = JSON.stringify(req.body) + JSON.stringify(req.query);
    const userIp = req.ip;
    // 初始化永久黑名单（如果不存在）
    initializePermBlacklist();
    // 检查IP是否在黑名单中
    const blacklistCheck = checkBlacklist(userIp);
    if (blacklistCheck.isBlacklisted) {
        if (blacklistCheck.type === 'perm') {
            return res.status(403).send('你已被永久封禁，请联系管理员');
        } else if (blacklistCheck.type === 'temp') {
            return res.status(403).send(`你已被封禁，剩余 ${blacklistCheck.remainingTime} 秒，请稍后再试或联系管理员`);
        }
    }
    // 检测SQL注入
    for (const pattern of sqlInjectionPatterns) {
        const regex = new RegExp(pattern, 'i');
        if (regex.test(userInput)) {
            logAttack('SQL Injection', userIp, userInput);
            recordAttackAttempt(userIp); // 记录攻击尝试
            return res.status(400).send('SQL Injection detected');
        }
    }
    // 检测XSS注入
    for (const pattern of xssInjectionPatterns) {
        const regex = new RegExp(pattern, 'i');
        if (regex.test(userInput)) {
            logAttack('XSS Injection', userIp, userInput);
            recordAttackAttempt(userIp); // 记录攻击尝试
            return res.status(400).send('XSS Injection detected');
        }
    }
    // 如果没有检测到注入，记录正常日志
    logAttack('Normal', userIp, userInput);
    next();
}
module.exports = detectInjection;
