我在编写一个基于xss攻击和sql注入的入侵检测插件。请根据目录结构和插件编写要求，给出相应的文件代码。

插件编写要求：
插件通过读取向量库中的内容来实现入侵检测，防御攻击。插件记录每条日志，用户正常输入，就输出一个正常日志，输出日志生成的时间。用户攻击输入，就输出攻击类型，攻击者的ip记录该条日志中。
作为参考的文件名字：入侵检测插件`InjectionDetection.js`位于根目录下的plugins目录中。SQL注入向量库`sqlInjection.json`与XSS注入向量库`xssInjection.json`位于根目录下的attackVectors目录下。入侵检测插件生成的日志`InjDetLogs.json`位于根目录下的`logs`目录中。
1.插件每次载入的时候，在控制台输出载入情况。
插件载入成功，在控制台输出成功等字样。
插件载入失败，在控制台输出失败等字样，并输出报错。
2.加一个临时黑名单和永久黑名单功能。（这两个都用文件来记录）
对于临时黑名单部分，检测到是攻击行为时，记录该攻击行为的ip次数。如果在一小时内达到10次攻击以上，就把该ip加入到临时黑名单中，禁止该ip对网页的正常访问，并弹出带有“请联系管理员”字样的相应提示。被加入临时黑名单的ip，将被封禁2小时，在封禁期间该ip访问页面，弹出带有“请联系管理员”字样的相应提示。2小时之后解除对该ip的封禁。
对于永久黑名单功能，需用户手动添加ip。被添加到这里的ip将永久不能访问web页面，直到该ip被手动移除。
3.加一个插件的后台管理页面。（我希望插件的后台管理页面部分与插件的核心功能部分，分成两个/多个文件来进行。）
3.1.插件载入成功后，在控制台输出成功字样后面，再输出该插件的后台管理页面的访问网址。
3.2.一个访问该后台页面的白名单功能。默认任意ip都可以访问。启用该功能后，手动输入指定的ip才能访问后台界面。
3.3.插件的启用和关闭。
3.4.显示防御了多少次攻击。
3.5.sql向量库和xss向量库的查看，手动增加、删除、修改。支持一键导入、导出。
3.6.临时黑名单和永久黑名单的查看，手动增加、删除、修改。
3.7.日志的查看。全部日志的查看。筛选查看，按日期、攻击类型（xss攻击、sql攻击）、输入指定ip等条件搜索查看。
3.8.设置一个警报。运行的时候检测到攻击行为时，在后台管理界面弹出一个警报，警报显示攻击类型，攻击者ip，攻击的时间。点击这个警报会跳转到日志查看中的该条日志位置。

#### web基础环境：
在一台存在xss攻击和sql注入漏洞的web服务器上，前后端分离，后端采用的node.js。

#### 对于web基础环境的文件改动要求：
插件通过手动安装项目目录结构安放在项目中尽可能的不改动web服务器的原文件，即使改动也是尽可能的最小改动。你可以根据需求来改动目录结构，如果必要的话。
对于server.js的调整改动，最好是只用添加引入文件的代码。如果最完美的话，就是完全不用修改server.js中的代码，如果你能做到这个最完美的情况的话。


#### web基础环境目录结构：
MyNewWeb/
│
├── public/
│   └── index.html           # 前端 HTML 文件（已存在）
│
├── sql/
│   └── users.sql           # 数据库文件（已存在）
│
├── package.json             # Node.js 项目描述文件（已存在）
└── server.js               # Node.js 服务器主文件（已存在）


#### 项目目录结构：
MyNewWeb/
│
├── public/
│   └── index.html                    # 前端 HTML 文件（已存在）
│
├── plugins/
│   └── InjectionDetection.js         # 入侵检测插件（插件，外部导入）
│
├── attackVectors/
│   ├── sqlInjection.json             # SQL注入向量库（插件附属文件，外部导入）
│   └── xssInjection.json             # XSS注入向量库（插件附属文件，外部导入）
│
├── logs/
│   └── InjDetLogs.json               # 插件生成的日志文件（插件运行时产生的日志）
│
├── blacklists/
│   ├── tempBlacklist.json            # 临时黑名单文件（插件附属文件，外部导入）
│   └── permBlacklist.json            # 永久黑名单文件（插件附属文件，外部导入）
│
├── pluginAdmin/                      # 插件后台管理页面相关文件目录
│   ├── admin.js                      # 后台管理页面的核心功能
│   ├── admin.html                    # 后台管理页面的HTML
│   └── whitelist.json                # 白名单文件
│
├── package.json                      # Node.js 项目描述文件（已存在）
├── server.js                         # Node.js 服务器主文件（已存在，最小修改来挂载插件）
└── routes/
    └── adminRoutes.js                # 管理页面路由文件（插件附属文件，外部导入）
信息：
（已存在）是web服务器原文件，尽可能的不改动。如果需要改动按最小改动。
（插件，外部导入）这个是我们要编写的入侵检测插件。
（插件附属文件，外部导入）这个是插件运行相关的文件，也是提前编写好导入到项目中的。
（插件运行时产生的日志）这个是插件运行的时候，自动生成的日志文件。记录日志。
